Block breaker (gotta be a better name)

Ultra simple functional version initially.

Blocks come down in one column & reach a final point where you must hit the appropriate key to break it and continue on to the next brick. 
Hopefully I can make it run speedy as it won't be much fun otherwise!
Once I have the barebones working with an up and down brick I can add many more classes for bricks to function differently & fancy bits like a scoreboard.






Step 1: get the grid div from the dom to append new divs (blocks)
Step 2: define the width & cell count in variables (many columns with central one (three with obstacles) being blocks)
Step 3: use a for loop to create a div(blocks) and put the index as innerText so it can be seen when logging
Step 4: Append the created divs to the grid div
Step 5: Store the cells for later use
Step 6: Define starting position of the blocks using variable & current position as let
Step 7: define functions to remove and add blocks one cell down as they descend
Step 7.5: functions for the blocks to slide off the side when broken
Step 8: define a class for the block at the point it should be broken so any block that goes into the final position is the one selected to breaker add a score assigned to each class of block 
Step 9: define a function for each type of block (i.e need to hit left arrow key to break one that has a left arrow on it) so they can be broken by the correct input and to add one to the counter for blocks broken correct
Step 9.25: define a function for the correctly broken block to slide off the screen opposite to the character
Step 9.5: define function for blocks being broken with the incorrect input that does not add to the blocks broken correct counter
Step 9.75: define a function for the incorrectly broken blocks to drop off the bottom of the screen
Step 10: define a function to randomly assign a class to a block on spawn (will have to be weighted towards regular ones)
Step 11: define a function to play a sound when a block is broken (one for correct and another for fail)
Step 12: define an end point for the game (after a certain amount of blocks have spawned)
Step 13: create a timer that starts once the first input happens
Step 14: Create alert (or if there's a prettier option) that displays high score & has an option to restart the game (and high scores would be a fucking dream)
Step 15: Use some maths to generate a high score using the blocks broken & time taken (and if achieved, obstacles hit)
Step 16: have a display for the timer & blocks broken & blocks remaining & have them update real time

EXTRA STUFF

Step 1: define a starting position for the character using variable and current position as let
Step 2: define functions to remove and add the character in the new cell (moving character)
Step 3: use a for loop to create yet more div (obstacles) and set the index as innerText so it can be seen when logging
Step 4: create a function to drop obstacles (will need an if statement maybe to make sure it doesn't drop them in an impossible manner)


Obstacles that fall from the top that you have to move to either side of the blocks to avoid




functionality ideas for blocks plus some bonus ones if I have time/can
regular blocks that break and add to score
maybe an inverted colour block from the basic ones where you have to hit the opposite direction key
A block that should not be broken and passes after a small delay
A block that gives double points for the next x blocks 
Double press blocks? Have to hit appropriate key twice to clear it




Bonus ideas!

Maybe some sort of streak counter/functionality that kicks in when on a streak?

Possibly an option to play for a different number of blocks (50/100/200/1000)

Maybe some kind of div to hide blocks as they get to the breaking position to use as a difficulty slider? (harder=more blocks hidden before breaking)


Many many many small cells in grid (and coordinates for blocks rather than fixed positions) = smooth movement for blocks possibly. Not sure it would be necessary but makes it much nicer to play/look at


Would love to implement multi-player. Could it be relatively simple for this game in that it would basically just be a mirror of the game except with different key inputs?

super unrealistic goal - co-operative multi player (also need to figure out mechanics for it first)



questions!



necessary next steps:

add starting overlay & end screen overlay (enter name, start game) / (score & high scores)
add restart button somewhere
define game end after 100 blocks
add sounds for background music and on breaking block right/wrong
Do some stylin
